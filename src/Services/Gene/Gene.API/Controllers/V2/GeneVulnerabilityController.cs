
using System.Net;
using CQRS.Core.Responses;
using Gene.Application.Features.Command.DeleteVulnerability;
using Gene.Application.Features.Command.NewVulnerability;
using Gene.Application.Features.Command.UpdateVulnerability;
using Microsoft.AspNetCore.Mvc;

namespace Gene.API.Controllers.V2
{

    public partial class GeneController : ControllerBase
    {

        [HttpPost("{id}/vulnerability", Name = "AddVulnerability")]
        [MapToApiVersion("2.0")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        public async Task<ActionResult> AddVulnerability(Guid id, NewVulnerabilityCommand command)
        {
            var vulnerabilityId = Guid.NewGuid();
            command.VulnerabilityId = vulnerabilityId;
            command.Id = id;
            command.GeneId = id;

            await _mediator.Send(command);

            return StatusCode(StatusCodes.Status201Created, new AddResponse
            {
                Id = vulnerabilityId,
                Message = "Vulnerability added successfully",
            });
        }


        [HttpPut("{id}/vulnerability/{vulnerabilityId}", Name = "UpdateVulnerability")]
        [MapToApiVersion("2.0")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult> UpdateVulnerability(Guid id, Guid vulnerabilityId, UpdateVulnerabilityCommand command)
        {
            command.Id = id;
            command.VulnerabilityId = vulnerabilityId;

            await _mediator.Send(command);

            return StatusCode(StatusCodes.Status200OK, new BaseResponse
            {
                Message = "Vulnerability updated successfully",
            });

        }

        [HttpDelete("{id}/vulnerability/{vulnerabilityId}", Name = "DeleteVulnerability")]
        [MapToApiVersion("2.0")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult> DeleteVulnerability(Guid id, Guid vulnerabilityId)
        {
            await _mediator.Send(new DeleteVulnerabilityCommand { Id = id, GeneId = id, VulnerabilityId = vulnerabilityId });

            return StatusCode(StatusCodes.Status200OK, new BaseResponse
            {
                Message = "Vulnerability deleted successfully",
            });

        }
    }
}