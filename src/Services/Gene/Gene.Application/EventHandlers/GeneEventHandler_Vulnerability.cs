
using CQRS.Core.Exceptions;
using Daikon.Events.Gene;
using Gene.Domain.Entities;
using Microsoft.Extensions.Logging;

namespace Gene.Application.Query.EventHandlers
{
    public partial class GeneEventHandler
    {
        public async Task OnEvent(GeneVulnerabilityAddedEvent @event)
        {
            _logger.LogInformation("OnEvent: GeneVulnerabilityAddedEvent: {VulnerabilityId}", @event.VulnerabilityId);

            var vulnerability = _mapper.Map<Vulnerability>(@event);

            vulnerability.Id = @event.VulnerabilityId;
            vulnerability.GeneId = @event.Id;

            try
            {
                await _geneVulnerabilityRepository.AddVulnerability(vulnerability);
            }
            catch (RepositoryException ex)
            {
                throw new EventHandlerException(nameof(EventHandler), "GeneVulnerabilityCreatedEvent Error creating vulnerability", ex);
            }
        }

        public async Task OnEvent(GeneVulnerabilityUpdatedEvent @event)
        {
            _logger.LogInformation("OnEvent: GeneVulnerabilityUpdatedEvent: {VulnerabilityId}", @event.VulnerabilityId);

            var existingVulnerability = await _geneVulnerabilityRepository.Read(@event.VulnerabilityId);
            var vulnerability = _mapper.Map<Vulnerability>(existingVulnerability);

            _mapper.Map(@event, vulnerability);
            vulnerability.Id = @event.VulnerabilityId;
            vulnerability.GeneId = @event.Id;

            // Preserve the original creation date and creator
            vulnerability.CreatedById = existingVulnerability.CreatedById;
            vulnerability.DateCreated = existingVulnerability.DateCreated;


            try
            {
                await _geneVulnerabilityRepository.UpdateVulnerability(vulnerability);
            }
            catch (RepositoryException ex)
            {
                throw new EventHandlerException(nameof(EventHandler), "GeneVulnerabilityUpdatedEvent Error updating vulnerability with id @event.VulnerabilityId", ex);
            }
        }

        public async Task OnEvent(GeneVulnerabilityDeletedEvent @event)
        {
            _logger.LogInformation("OnEvent: GeneVulnerabilityDeletedEvent: {VulnerabilityId}", @event.VulnerabilityId);
            try
            {
                await _geneVulnerabilityRepository.DeleteVulnerability(@event.VulnerabilityId);
            }
            catch (RepositoryException ex)
            {
                throw new EventHandlerException(nameof(EventHandler), "GeneVulnerabilityDeletedEvent Error deleting vulnerability with id @event.VulnerabilityId", ex);
            }
        }
    }
}