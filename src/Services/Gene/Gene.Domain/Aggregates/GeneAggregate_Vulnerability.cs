
using Daikon.Events.Gene;
using Gene.Domain.Entities;

namespace Gene.Domain.Aggregates
{
    public partial class GeneAggregate
    {

        private readonly Dictionary<Guid, Vulnerability> _vulnerabilities = [];

        /* Add Vulnerability */
        public void AddVulnerability(GeneVulnerabilityAddedEvent @event)
        {
            if (!_active)
            {
                throw new InvalidOperationException("This gene is deleted.");
            }
            if (@event.Id == Guid.Empty)
            {
                throw new InvalidOperationException("Event Id cannot be empty.");
            }
            if (@event.VulnerabilityId == Guid.Empty)
            {
                throw new InvalidOperationException("Vulnerability Id cannot be empty.");
            }
            if (_vulnerabilities.ContainsKey(@event.VulnerabilityId))
            {
                throw new Exception("Vulnerability already exists.");
            }
            if (string.IsNullOrWhiteSpace(@event.Rank))
            {
                throw new InvalidOperationException($" The value of vulnerability rank cannot be null or whitespace");
            }

            RaiseEvent(@event);
        }

        public void Apply(GeneVulnerabilityAddedEvent @event)
        {
            _vulnerabilities.Add(@event.VulnerabilityId, new Vulnerability
            {
                VulnerabilityId = @event.VulnerabilityId,
                Rank = @event.Rank,
                ViLowerBound = @event.ViLowerBound,
                ViUpperBound = @event.ViUpperBound,
                VulnerabilityIndex = @event.VulnerabilityIndex,
                VulnerabilityCondition = @event.VulnerabilityCondition,
                TnSeqEss = @event.TnSeqEss,
                CrisprEss = @event.CrisprEss,
                HighConfidenceVulnerabilityCall = @event.HighConfidenceVulnerabilityCall,
                Reference = @event.Reference,
                URL = @event.URL,
                
            });
        }

        /* Update Vulnerability */
        public void UpdateVulnerability(GeneVulnerabilityUpdatedEvent @event)
        {
            if (!_active)
            {
                throw new InvalidOperationException("This gene is deleted.");
            }
            if (@event.Id == Guid.Empty)
            {
                throw new InvalidOperationException("Event Id cannot be empty.");
            }
            if (@event.VulnerabilityId == Guid.Empty)
            {
                throw new InvalidOperationException("Vulnerability Id cannot be empty.");
            }
            if (!_vulnerabilities.ContainsKey(@event.VulnerabilityId))
            {
                throw new InvalidOperationException("Vulnerability does not exist.");
            }
            if (string.IsNullOrWhiteSpace(@event.Rank))
            {
                throw new InvalidOperationException($"The value of vulnerability rank cannot be null or whitespace");
            }

            RaiseEvent(@event);
        }
        

        public void Apply(GeneVulnerabilityUpdatedEvent @event)
        {
            _vulnerabilities[@event.VulnerabilityId].Rank = @event.Rank;
            _vulnerabilities[@event.VulnerabilityId].ViLowerBound = @event.ViLowerBound;
            _vulnerabilities[@event.VulnerabilityId].ViUpperBound = @event.ViUpperBound;
            _vulnerabilities[@event.VulnerabilityId].VulnerabilityIndex = @event.VulnerabilityIndex;
            _vulnerabilities[@event.VulnerabilityId].VulnerabilityCondition = @event.VulnerabilityCondition;
            _vulnerabilities[@event.VulnerabilityId].TnSeqEss = @event.TnSeqEss;
            _vulnerabilities[@event.VulnerabilityId].CrisprEss = @event.CrisprEss;
            _vulnerabilities[@event.VulnerabilityId].HighConfidenceVulnerabilityCall = @event.HighConfidenceVulnerabilityCall;
            _vulnerabilities[@event.VulnerabilityId].Reference = @event.Reference;
            _vulnerabilities[@event.VulnerabilityId].URL = @event.URL;

        }

        /* Delete Vulnerability */
        public void DeleteVulnerability(GeneVulnerabilityDeletedEvent @event)
        {
            if (!_active)
            {
                throw new InvalidOperationException("This gene is deleted.");
            }
            if (@event.VulnerabilityId == Guid.Empty)
            {
                throw new InvalidOperationException("Vulnerability Id cannot be empty.");
            }
            if (!_vulnerabilities.ContainsKey(@event.VulnerabilityId))
            {
                throw new InvalidOperationException("Vulnerability does not exist.");
            }

            RaiseEvent(@event);
        }
       

        public void Apply(GeneVulnerabilityDeletedEvent @event)
        {
            _vulnerabilities.Remove(@event.VulnerabilityId);
        }
    }
}