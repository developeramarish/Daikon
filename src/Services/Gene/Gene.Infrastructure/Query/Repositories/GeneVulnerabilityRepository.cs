
using CQRS.Core.Exceptions;
using CQRS.Core.Handlers;
using Gene.Application.Contracts.Persistence;
using Gene.Domain.Entities;
using Gene.Domain.EntityRevisions;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using MongoDB.Driver;

namespace Gene.Infrastructure.Query.Repositories
{
    public class GeneVulnerabilityRepository : IGeneVulnerabilityRepository
    {

        private readonly IMongoCollection<Vulnerability> _vulnerabilityCollection; 
        private readonly IVersionHub<VulnerabilityRevision> _versionHub;
        private readonly ILogger<GeneVulnerabilityRepository> _logger;

        public GeneVulnerabilityRepository(IConfiguration configuration, IVersionHub<VulnerabilityRevision> versionMaintainer, ILogger<GeneVulnerabilityRepository> logger)
        {
            var client = new MongoClient(configuration.GetValue<string>("GeneMongoDbSettings:ConnectionString"));
            var database = client.GetDatabase(configuration.GetValue<string>("GeneMongoDbSettings:DatabaseName"));
            _vulnerabilityCollection = database.GetCollection<Vulnerability>(
                configuration.GetValue<string>("GeneMongoDbSettings:GeneVulnerabilityCollectionName") ?? 
                configuration.GetValue<string>("GeneMongoDbSettings:GeneCollectionName") + "Vulnerability");
            _vulnerabilityCollection.Indexes.CreateOne
                (new CreateIndexModel<Vulnerability>(Builders<Vulnerability>.IndexKeys.Ascending(t => t.DateCreated), new CreateIndexOptions { Unique = false }));
            _versionHub = versionMaintainer ?? throw new ArgumentNullException(nameof(versionMaintainer));

            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        
        public async Task<Vulnerability> Read(Guid id)
        {
            try
            {
                return await _vulnerabilityCollection.Find(vulnerability => vulnerability.Id == id).FirstOrDefaultAsync();
            }
            catch (MongoException ex)
            {
                _logger.LogError(ex, "An error occurred while getting the vulnerability with ID {VulnerabilityId}", id);
                throw new RepositoryException(nameof(GeneVulnerabilityRepository), "Error getting vulnerability", ex);
            }
        }


        public async Task<List<Vulnerability>> GetVulnerabilityList()
        {
            try
            {
                return await _vulnerabilityCollection.Find(vulnerable => true)
                .SortBy(v => v.DateCreated)
                .ToListAsync();
            }
            catch (MongoException ex)
            {
                _logger.LogError(ex, "An error occurred while getting the vulnerable list");
                throw new RepositoryException(nameof(GeneVulnerabilityRepository), "Error getting vulnerable list", ex);
            }

        }

        public async Task<List<Vulnerability>> GetVulnerabilityOfGene(Guid geneId)
        {
            try
            {
                return await _vulnerabilityCollection.Find(vulnerability => vulnerability.GeneId == geneId)
                .SortBy(v => v.DateCreated)
                .ToListAsync();
            }
            catch (MongoException ex)
            {
                _logger.LogError(ex, "An error occurred while getting the vulnerability list");
                throw new RepositoryException(nameof(GeneVulnerabilityRepository), "Error getting vulnerability list", ex);
            }

        }

        public async Task AddVulnerability(Vulnerability vulnerability)
        {

            ArgumentNullException.ThrowIfNull(vulnerability);

            try
            {
                _logger.LogInformation("AddVulnerability: Creating Vulnerability {VulnerabilityId}, {vulnerability}", vulnerability.Id, vulnerability.ToJson());
                await _vulnerabilityCollection.InsertOneAsync(vulnerability);
                await _versionHub.CommitVersion(vulnerability);
            }
            catch (MongoException ex)
            {
                _logger.LogError(ex, "An error occurred while creating the Vulnerability with ID {Id}", vulnerability.Id);
                throw new RepositoryException(nameof(GeneVulnerabilityRepository), "Error creating Vulnerability", ex);
            }
        }

        public async Task UpdateVulnerability(Vulnerability vulnerability)
        {
            ArgumentNullException.ThrowIfNull(vulnerability);

            try
            {
                _logger.LogInformation("UpdateVulnerability: Updating Vulnerability {VulnerabilityId}, {vulnerability}", vulnerability.Id, vulnerability.ToJson());
                await _vulnerabilityCollection.ReplaceOneAsync(v => v.Id == vulnerability.Id, vulnerability);
                await _versionHub.CommitVersion(vulnerability);
            }
            catch (MongoException ex)
            {
                _logger.LogError(ex, "An error occurred while updating the Vulnerability with ID {VulnerabilityId}", vulnerability.Id);
                throw new RepositoryException(nameof(GeneVulnerabilityRepository), "Error updating Vulnerability", ex);
            }

        }


        public async Task DeleteVulnerability(Guid id)
        {
            ArgumentNullException.ThrowIfNull(id);

            try
            {
                _logger.LogInformation("DeleteVulnerability: Deleting Vulnerability {Vulnerability}", id);
                await _vulnerabilityCollection.DeleteOneAsync(gene => gene.Id == id);
                await _versionHub.ArchiveEntity(id);
            }
            catch (MongoException ex)
            {
                _logger.LogError(ex, "An error occurred while deleting the Vulnerability with ID {Vulnerability}", id);
                throw new RepositoryException(nameof(GeneVulnerabilityRepository), "Error deleting Vulnerability", ex);
            }

        }

        public async Task DeleteAllVulnerabilitiesOfGene(Guid geneId)
        {
            ArgumentNullException.ThrowIfNull(geneId);

            // find all vulnerabilities of gene and archive them individually
            var vulnerabilities = await _vulnerabilityCollection.Find(vulnerability => vulnerability.GeneId == geneId).ToListAsync();
            foreach (var vulnerability in vulnerabilities)
            {
                _logger.LogInformation("DeleteVulnerabilitiesOfGene: Archiving Vulnerability {VulnerabilityId}", vulnerability.Id);
                await _versionHub.ArchiveEntity(vulnerability.Id);
            }
            // delete all vulnerabilities of gene
            try
            {
                _logger.LogInformation("DeleteVulnerabilitiesOfGene: Deleting Vulnerabilities of Gene {GeneId}", geneId);
                await _vulnerabilityCollection.DeleteManyAsync(vulnerability => vulnerability.GeneId == geneId);
                
            }
            catch (MongoException ex)
            {
                _logger.LogError(ex, "An error occurred while deleting the Vulnerabilities of Gene with ID {GeneId}", geneId);
                throw new RepositoryException(nameof(GeneVulnerabilityRepository), "Error deleting Vulnerabilities of Gene", ex);
            }

        }

        public async Task<VulnerabilityRevision> GetVulnerabilityRevisions(Guid Id)
        {
            var vulnerabilityRevision = await _versionHub.GetVersions(Id);
            return vulnerabilityRevision;
        }
    }
}